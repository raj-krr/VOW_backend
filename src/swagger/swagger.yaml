openapi: 3.0.3
info:
  title: Auth + File Management API
  version: "1.0.0"
  description: Authentication endpoints + file upload, download, delete using Cloudinary. Metadata stored in MongoDB.
servers:
  - url: https://vow-org.me
    description: AWS deployed server

tags:
  - name: Auth
    description: Authentication and user account routes
  - name: me
    description: Current user profile routes
  - name: Files
    description: File upload/download/delete routes

paths:
  # ------------------- AUTH -------------------
  /auth/register:
    post:
      tags: [Auth]
      summary: Register a new user (creates or overwrites unverified account)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '201':
          description: Registered successfully — verification code sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegisterSuccess'
        '400':
          description: Missing fields or user exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Email or username already in use
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server error / email sending failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/verifyemail:
    post:
      tags: [Auth]
      summary: Verify email using OTP
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VerifyEmailRequest'
      responses:
        '200':
          description: Email verified successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          description: Invalid or expired OTP
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/resend:
    post:
      tags: [Auth]
      summary: Resend verification code
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResendRequest'
      responses:
        '200':
          description: Verification code resent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          description: Already verified / missing email
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Failed to send email
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/login:
    post:
      tags: [Auth]
      summary: Login using email or username and password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Login successful — returns tokens and user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginSuccess'
        '400':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/forgetpassword:
    post:
      tags: [Auth]
      summary: Send OTP to reset password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ForgotPasswordRequest'
      responses:
        '200':
          description: OTP sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForgotPasswordSuccess'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/verifyresetotp:
    post:
      tags: [Auth]
      summary: Verify reset OTP and get short-lived resetToken
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VerifyResetOtpRequest'
      responses:
        '200':
          description: OTP verified
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VerifyResetOtpSuccess'
        '400':
          description: Invalid OTP
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/updatepassword:
    post:
      tags: [Auth]
      summary: Update password using resetToken
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePasswordRequest'
      responses:
        '200':
          description: Password updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          description: Invalid / expired token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # ------------------- ME -------------------
  /me/updateprofile:
    post:
      tags: [me]
      summary: Update user profile details and avatar
      security:
        - bearerAuth: []
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProfileRequest'
      responses:
        '200':
          description: Profile updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /me/info:
    get:
      tags: [me]
      summary: Get user profile info
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User profile retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserSanitized'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # ------------------- FILES -------------------
  /files:
    get:
      tags: [Files]
      summary: Get all uploaded files
      responses:
        '200':
          description: List of uploaded files
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/File'

  /files/upload:
    post:
      tags: [Files]
      summary: Upload a new file to Cloudinary
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required: [file]
              properties:
                file:
                  type: string
                  format: binary
      responses:
        '200':
          description: File uploaded successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileUploadSuccess'
        '400':
          description: Missing file
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Upload failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /files/download/{id}:
    get:
      tags: [Files]
      summary: Download file by ID (redirect to Cloudinary)
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: MongoDB file ID
      responses:
        '302':
          description: Redirect to file URL
        '404':
          description: File not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /files/delete/{id}:
    delete:
      tags: [Files]
      summary: Delete a file from Cloudinary and MongoDB
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: MongoDB file ID
      responses:
        '200':
          description: File deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '404':
          description: File not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Deletion failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    RegisterRequest:
      type: object
      required: [email, username, password]
      properties:
        email:
          type: string
          format: email
          example: user@example.com
        username:
          type: string
          example: johndoe
        password:
          type: string
          format: password
          example: StrongP@ssw0rd

    RegisterSuccess:
      type: object
      properties:
        success:
          type: boolean
          example: true
        msg:
          type: string
          example: "Registered. Check your email for the verification code."
        user:
          $ref: '#/components/schemas/UserSanitized'

    VerifyEmailRequest:
      type: object
      required: [code]
      properties:
        email:
          type: string
          format: email
          description: Optional but recommended
          example: user@example.com
        code:
          type: string
          example: "123456"

    ResendRequest:
      type: object
      required: [email]
      properties:
        email:
          type: string
          format: email
          example: user@example.com

    LoginRequest:
      type: object
      required: [identifier, password]
      properties:
        identifier:
          type: string
          description: Email or username
          example: user@example.com
        password:
          type: string
          format: password
          example: StrongP@ssw0rd

    LoginSuccess:
      type: object
      properties:
        success:
          type: boolean
          example: true
        msg:
          type: string
          example: "Login successful"
        user:
          $ref: '#/components/schemas/UserSanitized'
        accessToken:
          type: string
        refreshToken:
          type: string

    ForgotPasswordRequest:
      type: object
      required: [email]
      properties:
        email:
          type: string
          format: email
          example: user@example.com

    ForgotPasswordSuccess:
      type: object
      properties:
        success:
          type: boolean
          example: true
        msg:
          type: string
          example: "OTP sent to email"
        otpExpiresAt:
          type: string
          format: date-time

    VerifyResetOtpRequest:
      type: object
      required: [email, otp]
      properties:
        email:
          type: string
          format: email
          example: user@example.com
        otp:
          type: string
          example: "123456"

    VerifyResetOtpSuccess:
      type: object
      properties:
        success:
          type: boolean
          example: true
        msg:
          type: string
          example: "OTP verified"
        resetToken:
          type: string
          description: Short-lived token (use on /auth/updatepassword)
        expiresIn:
          type: integer
          example: 600

    UpdatePasswordRequest:
      type: object
      required: [newPassword]
      properties:
        newPassword:
          type: string
          format: password
          example: NewStrongP@ss1

    UserSanitized:
      type: object
      properties:
        _id:
          type: string
        email:
          type: string
          format: email
        username:
          type: string
        isVerified:
          type: boolean
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    SuccessResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        msg:
          type: string
          example: "Operation completed"

    ErrorResponse:
      type: object
      properties:
        success:
          type: boolean
          example: false
        msg:
          type: string
          example: "Error message"
        details:
          type: object
          description: Optional extra info

    UpdateProfileRequest:
      type: object
      properties:
        fullName:
          type: string
          example: "John Doe"
        organisation:
          type: string
          example: "Acme Corp"
        gender:
          type: string
          enum: [male, female, other]
          example: male
        dob:
          type: string
          format: date
          example: "1990-01-01"

    File:
      type: object
      properties:
        _id:
          type: string
        filename:
          type: string
        url:
          type: string
        cloudinaryId:
          type: string
        size:
          type: integer
        mimeType:
          type: string
        createdAt:
          type: string
          format: date-time

    FileUploadSuccess:
      type: object
      properties:
        success:
          type: boolean
          example: true
        msg:
          type: string
          example: "File uploaded successfully"
        file:
          $ref: '#/components/schemas/File'
