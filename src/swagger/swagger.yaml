openapi: 3.0.3
info:
  title: Auth API
  version: "1.0.0"
  description: Authentication endpoints: register, verify email, resend code, login, forgot/reset password.
servers:
  - url: http://localhost:4400
    description: AWS deployed server

tags:
  - name: Auth
    description: Authentication and user account routes

paths:
  /auth/register:
    post:
      tags: [Auth]
      summary: Register a new user (creates or overwrites unverified account)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '201':
          description: Registered successfully — verification code sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegisterSuccess'
        '400':
          description: Missing fields or user exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Email or username already in use
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server error / email sending failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/verifyemail:
    post:
      tags: [Auth]
      summary: Verify an email using the verification code (OTP)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VerifyEmailRequest'
      responses:
        '200':
          description: Email verified successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          description: Invalid or expired code / bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/resend:
    post:
      tags: [Auth]
      summary: Resend verification code for an unverified email
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResendRequest'
      responses:
        '200':
          description: Verification code resent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          description: Already verified or missing email
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Failed to send verification email
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/login:
    post:
      tags: [Auth]
      summary: Login using email or username and password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Login successful — returns tokens and sanitized user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginSuccess'
        '400':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/forgetpassword:
    post:
      tags: [Auth]
      summary: Send an OTP for password reset to the user's email
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ForgotPasswordRequest'
      responses:
        '200':
          description: OTP sent to email
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForgotPasswordSuccess'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/verifyresetotp:
    post:
      tags: [Auth]
      summary: Verify reset OTP (first step in two-step reset flow)
      description: Verifies the OTP sent by email. If valid, returns a short-lived `resetToken` that the client can use to update password.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VerifyResetOtpRequest'
      responses:
        '200':
          description: OTP verified — reset token returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VerifyResetOtpSuccess'
        '400':
          description: Invalid or expired OTP / bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/updatepassword:
    post:
      tags: [Auth]
      summary: Update password using reset token obtained from verifyresetotp
      description: Client exchanges the `resetToken` and `newPassword` to update the user's password.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePasswordRequest'
      responses:
        '200':
          description: Password updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          description: Invalid or expired token / bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized / invalid token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /me/updateprofile:
    post:
      tags: [me]
      summary: Update user profile details and avatar
      security:
        - bearerAuth: []
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProfileRequest'
      responses:
        '200':
          description: Profile and avatar updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /me/info:
    get:
      tags: [me]
      summary: Get user profile information
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User profile retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserSanitized'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    RegisterRequest:
      type: object
      required: [email, username, password]
      properties:
        email:
          type: string
          format: email
          example: user@example.com
        username:
          type: string
          example: johndoe
        password:
          type: string
          format: password
          example: StrongP@ssw0rd

    RegisterSuccess:
      type: object
      properties:
        success:
          type: boolean
          example: true
        msg:
          type: string
          example: "Registered. Check your email for the verification code."
        user:
          $ref: '#/components/schemas/UserSanitized'

    VerifyEmailRequest:
      type: object
      required: [code]
      properties:
        email:
          type: string
          format: email
          description: Optional but recommended
          example: user@example.com
        code:
          type: string
          example: "123456"

    ResendRequest:
      type: object
      required: [email]
      properties:
        email:
          type: string
          format: email
          example: user@example.com

    LoginRequest:
      type: object
      required: [identifier, password]
      properties:
        identifier:
          type: string
          description: Email or username
          example: user@example.com
        password:
          type: string
          format: password
          example: StrongP@ssw0rd

    LoginSuccess:
      type: object
      properties:
        success:
          type: boolean
          example: true
        msg:
          type: string
          example: "Login successful"
        user:
          $ref: '#/components/schemas/UserSanitized'
        accessToken:
          type: string
        refreshToken:
          type: string

    ForgotPasswordRequest:
      type: object
      required: [email]
      properties:
        email:
          type: string
          format: email
          example: user@example.com

    ForgotPasswordSuccess:
      type: object
      properties:
        success:
          type: boolean
          example: true
        msg:
          type: string
          example: "OTP sent to email"
        otpExpiresAt:
          type: string
          format: date-time

    # Keep for backward compatibility if you still want it
    ResetPasswordRequest:
      type: object
      required: [email, otp, newPassword]
      properties:
        email:
          type: string
          format: email
          example: user@example.com
        otp:
          type: string
          example: "123456"
        newPassword:
          type: string
          format: password
          example: NewStrongP@ss1

    # Two-step flow schemas (match your verifyresetotp & updatepassword routes)
    VerifyResetOtpRequest:
      type: object
      required: [email, otp]
      properties:
        email:
          type: string
          format: email
          example: user@example.com
        otp:
          type: string
          example: "123456"

    VerifyResetOtpSuccess:
      type: object
      properties:
        success:
          type: boolean
          example: true
        msg:
          type: string
          example: "OTP verified"
        resetToken:
          type: string
          description: Short-lived token (use on /auth/updatepassword)
        expiresIn:
          type: integer
          description: Token TTL in seconds
          example: 600

    UpdatePasswordRequest:
      type: object
      required: [newPassword]
      properties:
        newPassword:
          type: string
          format: password
          example: NewStrongP@ss1

    UserSanitized:
      type: object
      properties:
        _id:
          type: string
        email:
          type: string
          format: email
        username:
          type: string
        isVerified:
          type: boolean
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    SuccessResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        msg:
          type: string
          example: "Operation completed"

    ErrorResponse:
      type: object
      properties:
        success:
          type: boolean
          example: false
        msg:
          type: string
          example: "Error message"
        details:
          type: object
          description: Optional extra info

    UpdateProfileRequest:
      type: object
      properties:
        fullName:
          type: string
          example: "John Doe"
        organisation:
          type: string
          example: "Acme Corp"  
        gender:
          type: string
          enum: [ male, female, other ]
          example: male 
        dob:
          type: string
          format: date
          example: "1990-01-01" 

security:
  - bearerAuth: []


components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
